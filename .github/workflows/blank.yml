name: test octokit request action
on:
  workflow_dispatch:

jobs:
  check-if-project-exists:
    runs-on: ubuntu-latest
    env:
      repository: "${{github.repository}}"
      project-name: "Request Action Validation"
    outputs:
      project-exists: ${{ steps.check-project-exists.outputs.project-exists }}
    steps:
      - name: retrieve repository project list
        uses: octokit/request-action@v2.1.6
        id: get_repository_projects
        with:
          route: GET /repos/{repo}/projects
          repo: ${{env.repository}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: check if project already exists
        id: check-project-exists
        run: |
               project=$(echo '${{ steps.get_repository_projects.outputs.data }}' | jq '.[] | select(.name=="${{env.project-name}}" and .state=="open")')
               echo "::set-output name=project-exists::$( [ ${#project} = 0 ]; echo $?)"
               echo "::notice title='Project already exists'::'A project named ${{ env.project-name }} already exists'"
      - name: show result
        run: echo "${{steps.check-project-exists.outputs.project-exists}}"
#      - name: status
#        run: echo '${{ steps.get_repository_projects.outputs.status }}'
#        
  create-project:
    needs: check-if-project-exists
    if: needs.check-if-project-exists.outputs.project-exists == 0
    runs-on: ubuntu-latest
    env:
      repository: "${{github.repository}}"
      project-name: "Request Action Validation"
    steps:
      - name: exists
        run: echo '${{ needs.check-if-project-exists.outputs.project-exists }}'
               
#      - uses: octokit/request-action@v2.1.6
#        id: get_latest_release
#        with:
#          route: POST /repos/{owner}/{repo}/projects
#          owner: belcebus
#          repo: issuecomment-test
#          name: 'Projects Documentation'
#          body: 'Developer documentation project for the developer site.'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
#      - run: echo '${{ steps.get_latest_release.outputs.data }}'
