name: create security validation board
on:
  workflow_dispatch:

env:
  project-name: "Request Action Validation"
  repository: "${{github.repository}}"

jobs:
  check-project:
    name: Check repository projects
    runs-on: ubuntu-latest
    outputs:
      project-exists: ${{ steps.check-project-exists.outputs.project-exists }}
    steps:
      - name: retrieve repository project list
        uses: octokit/request-action@v2.1.6
        id: get_repository_projects
        with:
          route: GET /repos/{repo}/projects
          repo: ${{env.repository}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: check if project already exists
        id: check-project-exists
        run: |
               project=$(echo '${{ steps.get_repository_projects.outputs.data }}' | jq '.[] | select(.name=="${{env.project-name}}" and .state=="open")')
               if [ ${#project} != 0 ];
               then
                 echo "::set-output name=project-exists::1"
                 echo "::notice title='Project already exists'::'A project named ${{ env.project-name }} already exists'"
               fi
      - name: show result
        run: echo "${{steps.check-project-exists.outputs.project-exists}}"
      
  create-project:
    name: Create validation project
    if: needs.check-project.outputs.project-exists == 0
    needs: check-project
    runs-on: ubuntu-latest
    outputs:
      project-id: ${{ steps.get-projet-id.outputs.projec-id }}
    steps:
      - name: exists
        run: echo '${{ needs.check-project.outputs.project-exists }}'
               
      - name: create the repositoy project
        uses: octokit/request-action@v2.1.6
        id: create-project
        with:
          route: POST /repos/{repo}/projects
          repo: ${{env.repository}}
          name: ${{env.project-name}}
          body: "Automatic created. Project for thir party validation process requests"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     
      - name: return repository project id
        id: get-project-id
        run: |
              echo ::set-output name=project-id::$( echo "${{ steps.create-project.outputs.data }}"  | jq 'id')
              echo ${{steps.get-projet-id.outputs.project-id}}

  create-columns:
    name: Create project columns
    needs: create-project
    runs-on: ubuntu-latest

    steps:
      - name: create columns
        run: echo ${{ needs.create-project.outputs.project-id }}